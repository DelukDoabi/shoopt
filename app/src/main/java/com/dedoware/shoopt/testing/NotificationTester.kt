package com.dedoware.shoopt.testing

import android.content.Context
import com.dedoware.shoopt.notifications.ShoppingReminderScheduler
import com.dedoware.shoopt.notifications.NotificationManager
import com.dedoware.shoopt.notifications.NotificationPreferencesManager

/**
 * Classe utilitaire pour tester les notifications de rappel courses
 */
object NotificationTester {

    /**
     * Teste immÃ©diatement la notification (dans 5 secondes)
     */
    fun testImmediateNotification(context: Context) {
        val scheduler = ShoppingReminderScheduler.getInstance(context)
        scheduler.scheduleImmediateTestReminder(context)
        println("ðŸ§ª Test de notification programmÃ© pour dans 5 secondes")
    }

    /**
     * Teste directement l'affichage de la notification
     */
    fun testNotificationDisplay(context: Context) {
        val notificationManager = NotificationManager.getInstance(context)
        notificationManager.showShoppingReminder()
        println("ðŸ§ª Notification de test affichÃ©e immÃ©diatement")
    }

    /**
     * Teste une notification personnalisÃ©e
     */
    fun testCustomNotification(context: Context, title: String, message: String) {
        val notificationManager = NotificationManager.getInstance(context)
        notificationManager.showCustomReminder(title, message)
        println("ðŸ§ª Notification personnalisÃ©e affichÃ©e : $title")
    }

    /**
     * VÃ©rifie l'Ã©tat des prÃ©fÃ©rences de notification
     */
    fun checkNotificationSettings(context: Context): Map<String, Any> {
        val prefsManager = NotificationPreferencesManager.getInstance(context)
        return prefsManager.getPreferencesSummary()
    }

    /**
     * VÃ©rifie les informations du prochain rappel programmÃ©
     */
    fun checkScheduledReminder(context: Context): Map<String, Any> {
        val scheduler = ShoppingReminderScheduler.getInstance(context)
        return scheduler.getNextReminderInfo(context)
    }

    /**
     * Teste le scÃ©nario complet : vÃ©rification des conditions + notification
     */
    fun testCompleteScenario(context: Context): String {
        val prefsManager = NotificationPreferencesManager.getInstance(context)
        val scheduler = ShoppingReminderScheduler.getInstance(context)

        return buildString {
            appendLine("ðŸ§ª TEST COMPLET DE LA FONCTIONNALITÃ‰")
            appendLine("=====================================")

            // VÃ©rifier les prÃ©fÃ©rences
            val prefs = prefsManager.getPreferencesSummary()
            appendLine("âœ… Notifications activÃ©es: ${prefs["notifications_enabled"]}")
            appendLine("âœ… Rappels samedi activÃ©s: ${prefs["saturday_reminders_enabled"]}")
            appendLine("âœ… Heure de rappel: ${prefsManager.getReminderTimeFormatted()}")

            // VÃ©rifier la programmation
            val reminderInfo = scheduler.getNextReminderInfo(context)
            appendLine("âœ… Rappel programmÃ©: ${reminderInfo["is_scheduled"]}")
            appendLine("âœ… Prochaine exÃ©cution: ${reminderInfo["next_execution"]}")
            appendLine("âœ… Jours restants: ${reminderInfo["days_until"]}")

            // Test de notification
            appendLine("\nðŸ§ª Lancement du test de notification...")
            testImmediateNotification(context)
            appendLine("âœ… Notification de test programmÃ©e pour 5 secondes")
        }
    }
}
